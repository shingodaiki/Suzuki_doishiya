<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Publish</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{7DEF4226-7740-457F-9199-34174C49A978}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CopyLibrariesToDevelopmentFolder</RootNamespace>
    <AssemblyName>CopyLibrariesToDevelopmentFolder</AssemblyName>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <OutputPath>build</OutputPath>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Publish|AnyCPU' ">
    <Config>Release</Config>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'PublishDebug|AnyCPU'">
    <Config>Debug</Config>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\..\submodules\dotnet-httpClient35\System.Net.Http\System.Net.Http-net_3_5.csproj">
      <Project>{9862694d-e4fa-418b-8692-a0280feddf36}</Project>
      <Name>System.Net.Http-net_3_5</Name>
    </ProjectReference>
    <ProjectReference Include="..\..\..\submodules\octokit.net\Octokit-Extensions35\Octokit-Extensions35.csproj">
      <Project>{eb4b074e-62a7-4f1d-8f95-e64b7aea0236}</Project>
      <Name>Octokit-Extensions35</Name>
    </ProjectReference>
    <ProjectReference Include="..\..\..\submodules\octokit.net\Octokit\Octokit-35.csproj">
      <Project>{49ef16a2-5ed1-480f-80a1-d1d05d6c1be4}</Project>
      <Name>Octokit-35</Name>
    </ProjectReference>
    <ProjectReference Include="..\..\GitHub.Api\GitHub.Api.csproj">
      <Project>{b389adaf-62cc-486e-85b4-2d8b078df763}</Project>
      <Name>GitHub.Api</Name>
    </ProjectReference>
    <ProjectReference Include="..\..\GitHub.Logging\GitHub.Logging.csproj">
      <Project>{bb6a8eda-15d8-471b-a6ed-ee551e0b3ba0}</Project>
      <Name>GitHub.Logging</Name>
    </ProjectReference>
    <ProjectReference Include="..\..\UnityExtension\Assets\Editor\GitHub.Unity\GitHub.Unity.csproj">
      <Project>{add7a18b-dd2a-4c22-a2c1-488964eff30a}</Project>
      <Name>GitHub.Unity</Name>
      <Private>False</Private>
    </ProjectReference>
    <Reference Include="AsyncBridge.Net35, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b3b1c0202c0d6a87, processorArchitecture=MSIL">
      <HintPath>$(SolutionDir)\packages\AsyncBridge.Net35.0.2.0\lib\net35-Client\AsyncBridge.Net35.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Rackspace.Threading, Version=2.0.0.0, Culture=neutral, PublicKeyToken=bb62785d398726f0, processorArchitecture=MSIL">
      <HintPath>$(SolutionDir)\packages\Rackspace.Threading.2.0.0-alpha001\lib\net35-client\Rackspace.Threading.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="ReadOnlyCollectionsInterfaces, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>$(SolutionDir)\packages\ReadOnlyCollectionInterfaces.1.0.0\lib\NET20\ReadOnlyCollectionsInterfaces.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Threading, Version=1.0.2856.102, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>$(SolutionDir)\packages\TaskParallelLibrary.1.0.2856.0\lib\Net35\System.Threading.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="sfw.net">
      <HintPath>$(SolutionDir)\lib\sfw.net\win\x64\$(Config)\sfw.net.dll</HintPath>
      <Private>True</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Properties\" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Class1.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
  </ItemGroup>
  <ItemGroup>
    <!-- Content Include="$(SolutionDir)\lib\sfw.net\osx\libsfw.dylib">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content -->
    <Content Include="$(SolutionDir)\lib\sfw.net\win\x64\$(Config)\sfw.dll">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="$(SolutionDir)\lib\sfw.net\win\x64\$(Config)\pthreadVC2.dll">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
-->

  <PropertyGroup>
    <PublishTo Condition="'$(PublishTo)' == '' ">$(SolutionDir)\unity\PackageProject\Assets\Editor\GitHub</PublishTo>
    <ExternalPublishTo>$(SolutionDir)..\github-unity-test\GitHubExtensionProject\Assets\Editor\GitHub</ExternalPublishTo>
  </PropertyGroup>

  <Target Name="AfterBuild">
    <CreateItem Include="$(OutputPath)\**\*.*">
        <Output TaskParameter="Include" ItemName="ToCopy" />
    </CreateItem>

    <Copy SourceFiles="@(ToCopy)"
      DestinationFiles="@(ToCopy->'$(PublishTo)\%(RecursiveDir)%(Filename)%(Extension)')"
      Condition="
        !$([System.String]::Copy('%(Filename)').Contains('CopyLibraries')) and
        !$([System.String]::Copy('%(Extension)').Contains('xml')) and
        !$([System.String]::Copy('%(Extension)').Contains('pdb')) and
        !$([System.String]::Copy('%(Extension)').Contains('dll.mdb'))
        "
      />

    <CreateItem Include="$(PublishTo)\**\*.*">
        <Output TaskParameter="Include" ItemName="ToMoreCopy" />
      </CreateItem>

    <Copy SourceFiles="@(ToMoreCopy)"
      DestinationFiles="@(ToMoreCopy->'$(ExternalPublishTo)\%(RecursiveDir)%(Filename)%(Extension)')"
      />

  </Target>

  <Target Name="CopyMainAssembly" DependsOnTargets="DetectMainAssembly">
    <Copy Condition="'%(IndirectDependency.FullPath)'!=''" SourceFiles="%(IndirectDependency.FullPath)" DestinationFolder="$(OutputPath)" SkipUnchangedFiles="true">
      <Output TaskParameter="CopiedFiles" ItemName="IndirectDependencyCopied" />
    </Copy>
    <Message Importance="low" Condition="'%(IndirectDependencyCopied.FullPath)'!='' &#xD;&#xA;               and '%(IndirectDependencyCopied.Extension)'!='.pdb' &#xD;&#xA;               and '%(IndirectDependencyCopied.Extension)'!='.xml'" Text="Dependency copied: %(IndirectDependencyCopied.FullPath)" />
  </Target>
  <Target Name="DetectMainAssembly" DependsOnTargets="ResolveAssemblyReferences">
    <Message Importance="low" Text="Dependency: %(ReferencePath.Filename)%(ReferencePath.Extension) %(ReferencePath.CopyLocal)" />
    <!-- Creating indirect dependency list -->
    <CreateItem Include="%(ReferencePath.FullPath)" Condition="$([System.String]::Copy('%(ReferencePath.Filename)').Contains('GitHub.Unity'))">
      <Output TaskParameter="Include" ItemName="IndirectDependency" />
    </CreateItem>
  </Target>
  <PropertyGroup>
    <CoreBuildDependsOn>
      $(CoreBuildDependsOn);
      CopyMainAssembly
    </CoreBuildDependsOn>
  </PropertyGroup>
</Project>